package com.qa.hubspot.tests;

import java.util.Properties;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.qa.hubspot.basepage.BasePage;
import com.qa.hubspot.pages.HomePage;
import com.qa.hubspot.pages.LoginPage;
import com.qa.hubspot.util.ExcelUtil;
import com.qa.hubspot.utility.Constants;

//@Listeners(ExtentReportListener.class)
public class LoginPageTest {

	WebDriver driver;
	BasePage basePage;
	Properties prop;

	// Rahna Comment:loginPage Used by all tests
	LoginPage loginPage;
	HomePage homePage;

	/*
	 * Rahna Comment:@BeforeMethod,@AfterMethod-3 Browsers Opened , 1 test case in
	 * each browsers If 50 test case 50 browsers opened In case every test case is
	 * important If browser crashed...next test case opened in new browser
	 * Advantage: Percentage of getting good result is high DisAdvantage:Time
	 * consuming
	 */
	/*
	 * Rahna Comment:@BeforeTest,@AfterTest-1 Browser Opened 3 test cases executed
	 * Advantage: Percentage of getting good result is low....if browser crash in
	 * 5,others skipped DisAdvantage:Fast Execution
	 */
	// @BeforeMethod
	@BeforeTest
	public void setUp() throws InterruptedException {
		// Rahna Comment:Base Code
		basePage = new BasePage();
		// Rahna Comment:This Properties have all info about Properties(browser
		// name,UN,PSWD)
		prop = basePage.init_properties();
		// Rahna Comment:This Driver have all info about driver,browser,cookies
		driver = basePage.init_driver(prop);
		// Rahna Comment:LoginPage constructor need driver pass it
		loginPage = new LoginPage(driver);
	}

	/*
	 * @Test(priority = 1, enabled = false) Excluded in Test execution Don't delete
	 * or don't comment. Just give enabled = false.In case of flaky
	 */
	@Test(priority = 1, enabled = true)
	public void verifyLoginPageTitleTest() {
		// Rahna Comment:Reporter To print messages in html Report generated by testng
		// instead of console
		// "Append with New line \n"
		// Not a good practice. Need to add more unwanted lines
		Reporter.log("Test started--> " + "verifyLoginPageTitleTest" + "\n");
		// Rahna Comment:Base Code
		String title = loginPage.getLoginPageTitle();
		Reporter.log("login page title is: " + title);
		System.out.println("Login Page Title: " + title);
		Assert.assertEquals(title, Constants.LOGIN_PAGE_TITLE);
		Reporter.log("Test ended--> " + "verifyLoginPageTitleTest");
	}

	@Test(priority = 2)
	public void verifySignUpLinkTest() {
		// Rahna Comment:Base Code
		Assert.assertTrue(loginPage.isSignUpLinkExists());
	}

	@DataProvider
	public Object[][] getContactsTestData() {
		Object data[][] = ExcelUtil.getTestData(Constants.CONTACTS_SHEET_NAME.trim());
		return data;
	}

	@Test(dataProvider = "getContactsTestData", enabled = false)
	public void verifyDataProvider(String email, String firstName, String lastName, String jobTitle) {
		loginPage.testDataProvider(email, firstName);

	}

	@Test(priority = 3, enabled = false)
	public void verifyLoginTest() {
		// Rahna Comment:Base Code
		loginPage.doLogin(prop.getProperty("username"), prop.getProperty("password"));
		// Rahna Comment:Refactoring 1
		// Assert.assertTrue(homePage.verifyLoggedAccountName());
		// Assert.assertEquals(homePage.getLoggedAccountName(),
		// prop.getProperty("accountname"));
	}

	@Test(priority = 4, enabled = false)
	public void verifyHomePageTitleTest() {
		String title = homePage.getHomePageTitle();
		System.out.println("Home Page Title: " + title);
		Assert.assertEquals(title, Constants.HOME_PAGE_TITLE, "Incorrect Home Page Title...");
	}

	// @AfterMethod
	@AfterTest
	public void quitBrowser() {
		// Rahna Comment:Base Code
		driver.quit();
	}

}
